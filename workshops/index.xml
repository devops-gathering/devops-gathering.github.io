<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Workshops-rsses on Devops Gathering 2018</title>
    <link>https://devops-gathering.io/workshops/index.xml</link>
    <description>Recent content in Workshops-rsses on Devops Gathering 2018</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://devops-gathering.io/workshops/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Workshop: Building A Self-Sufficient System</title>
      <link>https://devops-gathering.io/workshops/workshop-building-a-self-sufficient-system/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devops-gathering.io/workshops/workshop-building-a-self-sufficient-system/</guid>
      <description>&lt;p&gt;What do we expect from a modern cluster? If a replica fails, it should be brought back up (rescheduled). If a node goes down all the services that were running inside it should be distributed among healthy nodes. Those tasks are easy to accomplish. Schedulers (Swarm, Kubernetes, Mesos/Marathon, and so on) are already doing those things for us. Many solutions provide self-healing by making sure that the system is (almost) always in the desired state.&lt;/p&gt;

&lt;p&gt;The problem with self-healing is that it does not take into the account constant changes. The number of requests is continuously changing, errors are created, network bandwidth is fluctuating, and so on. A cluster, and services inside it, is like a living body that needs to adapt to changes continuously. Services need to be scaled and de-scaled, nodes need to be created and added to the cluster only to be removed soon after. We call that process adaptation. Even that is not the problem in itself, as long as we have an army of operators that will monitor the system and do reactive and preventive actions.&lt;/p&gt;

&lt;p&gt;How about converting adaptation into self-adaptation? Can we remove humans from the process and make a system that is &lt;strong&gt;self-sufficient&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;The goal of this workshop is to provide hands-on exercises that outline the steps required for a design of a &lt;strong&gt;self-adapting&lt;/strong&gt; and &lt;strong&gt;self-healing&lt;/strong&gt; system that will continue operating efficiently even when we are on vacations. We&amp;rsquo;ll define goals and processes and explore quite a few tools (Docker, Prometheus, Alertmanager, Jenkins, AWS, and so on). The end-result of the workshop will be a base for a &lt;strong&gt;self-sufficient&lt;/strong&gt; system that you&amp;rsquo;ll be able to implement in your organization.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Running Docker Containers on AWS</title>
      <link>https://devops-gathering.io/workshops/Running-Docker-Containers-on-AWS/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devops-gathering.io/workshops/Running-Docker-Containers-on-AWS/</guid>
      <description>

&lt;p&gt;Running containers locally has been made very easy by Docker with tools like Docker for Mac or Windows. With Docker Swarm a group of Docker engines can be turned into a virtual Docker Engine providing native clustering capabilities.&lt;/p&gt;

&lt;p&gt;But how do you setup Docker Swarm cluster on AWS? What is necessary to deploy your application to the swarm?&lt;/p&gt;

&lt;p&gt;In this workshop, Philipp guides you step-by-step through the process of setting up Docker Swarm from scratch. He also shows how to deploy and update applications based on Docker Compose v3. Principals like immutable infrastructure and configuration as code will influence the entire process as CloudFormation plays an important role.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Agenda:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Basic Setup&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Local Requirements&lt;/li&gt;
&lt;li&gt;Immutable Infrastructure with CloudFormation&lt;/li&gt;
&lt;li&gt;Basic VPC Setup&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Docker &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Run Docker on EC2 (VMs)&lt;/li&gt;
&lt;li&gt;Scale with AutoScaling Groups&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Docker Swarm&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Setup Manager Nodes&lt;/li&gt;
&lt;li&gt;Secure Swarm Tokens&lt;/li&gt;
&lt;li&gt;Automatically join Worker Nodes&lt;/li&gt;
&lt;li&gt;Deploy sample application&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;who-should-join&#34;&gt;Who should join?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Everyone who wants to setup and run Docker Swarm on AWS&lt;/li&gt;
&lt;li&gt;Some experience with AWS or Docker is recommended (but not required)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Bring your own laptop&lt;/li&gt;
&lt;li&gt;Have your own AWS account (Free Tier, &lt;a href=&#34;https://aws.amazon.com/premiumsupport/knowledge-center/create-and-activate-aws-account/&#34;&gt;https://aws.amazon.com/premiumsupport/knowledge-center/create-and-activate-aws-account/&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Install AWS Cli (&lt;a href=&#34;http://docs.aws.amazon.com/cli/latest/userguide/installing.html&#34;&gt;http://docs.aws.amazon.com/cli/latest/userguide/installing.html&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;slides&#34;&gt;Slides&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/pgarbe/containers_on_aws_workshop&#34;&gt;https://github.com/pgarbe/containers_on_aws_workshop&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>