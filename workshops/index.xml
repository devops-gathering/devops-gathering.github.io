<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Workshops-rsses on Devops Gathering 2018</title>
    <link>https://devops-gathering.io/workshops/index.xml</link>
    <description>Recent content in Workshops-rsses on Devops Gathering 2018</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://devops-gathering.io/workshops/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Workshop: Building A Self-Sufficient System</title>
      <link>https://devops-gathering.io/workshops/Workshop-Building-a-Self-Sufficient-System/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devops-gathering.io/workshops/Workshop-Building-a-Self-Sufficient-System/</guid>
      <description>&lt;p&gt;What do we expect from a modern cluster? If a replica fails, it should be brought back up (rescheduled). If a node goes down all the services that were running inside it should be distributed among healthy nodes. Those tasks are easy to accomplish. Schedulers (Swarm, Kubernetes, Mesos/Marathon, and so on) are already doing those things for us. Many solutions provide self-healing by making sure that the system is (almost) always in the desired state.&lt;/p&gt;

&lt;p&gt;The problem with self-healing is that it does not take into the account constant changes. The number of requests is continuously changing, errors are created, network bandwidth is fluctuating, and so on. A cluster, and services inside it, is like a living body that needs to adapt to changes continuously. Services need to be scaled and de-scaled, nodes need to be created and added to the cluster only to be removed soon after. We call that process adaptation. Even that is not the problem in itself, as long as we have an army of operators that will monitor the system and do reactive and preventive actions.&lt;/p&gt;

&lt;p&gt;How about converting adaptation into self-adaptation? Can we remove humans from the process and make a system that is &lt;strong&gt;self-sufficient&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;The goal of this workshop is to provide hands-on exercises that outline the steps required for a design of a &lt;strong&gt;self-adapting&lt;/strong&gt; and &lt;strong&gt;self-healing&lt;/strong&gt; system that will continue operating efficiently even when we are on vacations. We&amp;rsquo;ll define goals and processes and explore quite a few tools (Docker, Prometheus, Alertmanager, Jenkins, AWS, and so on). The end-result of the workshop will be a base for a &lt;strong&gt;self-sufficient&lt;/strong&gt; system that you&amp;rsquo;ll be able to implement in your organization.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Workshop: Building a Modern CI/CD Pipeline (with Docker and Kubernetes)</title>
      <link>https://devops-gathering.io/workshops/Workshop-Building-a-Modern-CI-CD-Pipeline-with-Docker-and-Kubernetes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devops-gathering.io/workshops/Workshop-Building-a-Modern-CI-CD-Pipeline-with-Docker-and-Kubernetes/</guid>
      <description>&lt;p&gt;The purpose of this workshop is to explore the core concepts of modern Continuous Delivery (CD). The participants will learn why CD is needed, what are the necessary (and the optional) parts of a great CD pipeline and how to wire them all together for an effective workflow. In the process we will get our hands dirty building and deploying a number of interconnected microservices onto a cloud-based cluster.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>