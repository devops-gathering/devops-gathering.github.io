<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Workshops-rsses on Devops Gathering 2018 | February 19 - 21, 2018 in Bochum</title>
    <link>https://devops-gathering.io/workshops/index.xml</link>
    <description>Recent content in Workshops-rsses on Devops Gathering 2018 | February 19 - 21, 2018 in Bochum</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://devops-gathering.io/workshops/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Workshop (SOLD OUT): Building A Self-Sufficient System</title>
      <link>https://devops-gathering.io/workshops/Workshop-Building-a-Self-Sufficient-System/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devops-gathering.io/workshops/Workshop-Building-a-Self-Sufficient-System/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://devops-gathering.io/img/sold-out.png&#34; alt=&#34;Workshop is sold out&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Please note: This Workshop is already sold out!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;What do we expect from a modern cluster? If a replica fails, it should be brought back up (rescheduled). If a node goes down all the services that were running inside it should be distributed among healthy nodes. Those tasks are easy to accomplish. Schedulers (Swarm, Kubernetes, Mesos/Marathon, and so on) are already doing those things for us. Many solutions provide self-healing by making sure that the system is (almost) always in the desired state.&lt;/p&gt;

&lt;p&gt;The problem with self-healing is that it does not take into the account constant changes. The number of requests is continuously changing, errors are created, network bandwidth is fluctuating, and so on. A cluster, and services inside it, is like a living body that needs to adapt to changes continuously. Services need to be scaled and de-scaled, nodes need to be created and added to the cluster only to be removed soon after. We call that process adaptation. Even that is not the problem in itself, as long as we have an army of operators that will monitor the system and do reactive and preventive actions.&lt;/p&gt;

&lt;p&gt;How about converting adaptation into self-adaptation? Can we remove humans from the process and make a system that is &lt;strong&gt;self-sufficient&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;The goal of this workshop is to provide hands-on exercises that outline the steps required for a design of a &lt;strong&gt;self-adapting&lt;/strong&gt; and &lt;strong&gt;self-healing&lt;/strong&gt; system that will continue operating efficiently even when we are on vacations. We&amp;rsquo;ll define goals and processes and explore quite a few tools (Docker, Prometheus, Alertmanager, Jenkins, AWS, and so on). The end-result of the workshop will be a base for a &lt;strong&gt;self-sufficient&lt;/strong&gt; system that you&amp;rsquo;ll be able to implement in your organization.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Workshop: GitLab/CI Basics</title>
      <link>https://devops-gathering.io/workshops/Workshop-GitLab-CI-Basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devops-gathering.io/workshops/Workshop-GitLab-CI-Basics/</guid>
      <description>&lt;p&gt;Whether small startups or large companies - many of them rely on the open-source Docker technology. But what about the kind of containers that roll up the virtualization market and change the software development in the long term? Docker promises a quick start, flexible configuration and stable images for development and production. Nice, but a developer or operator must be present in order to setup automation, to build, test and deliver Docker images. At this workshop you learn how to setup GitLab/CI with the objective to maintain your project sources, automate your Continuous Integration and Delivery pipeline for simple Docker images.
We start with an overview and introduce the first steps by demonstrating the usage of GitLab/CI. You will get an overview of the most important components, instructions and concepts. Using a simple example, you will learn how to implement a microservice, automate the build with a simple gitlab runner, install with Docker, test and integrate with other services in an environment.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Workshop (SOLD OUT): Introduction into Kubernetes</title>
      <link>https://devops-gathering.io/workshops/Workshop-Introduction-into-Kubernetes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devops-gathering.io/workshops/Workshop-Introduction-into-Kubernetes/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Please note: This Workshop is already sold out!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The workshop gives a very basic introduction into Kubernetes. We will go through the lifecycle of a deployment and learn the basic concepts of Kubernetes.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pods&lt;/li&gt;
&lt;li&gt;Services&lt;/li&gt;
&lt;li&gt;Autoscaling&lt;/li&gt;
&lt;li&gt;Rolling Updates&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All handson, basic Docker and Linux knowhow required.&lt;/p&gt;

&lt;h2 id=&#34;requirements&#34;&gt;Requirements:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;either a Laptop with at least 8 GB of memory and a preinstalled
minikube for your operating system.
Installation instructions are here &lt;a href=&#34;https://github.com/kubernetes/minikube&#34;&gt;https://github.com/kubernetes/minikube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;or alternatively access to Kubernetes in a cloud like GCE.
Instructions for GKE are here
&lt;a href=&#34;https://cloud.google.com/kubernetes-engine/docs/quickstart&#34;&gt;https://cloud.google.com/kubernetes-engine/docs/quickstart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;and an installed version of Kubectl &lt;a href=&#34;https://kubernetes.io/docs/tasks/tools/install-kubectl&#34;&gt;https://kubernetes.io/docs/tasks/tools/install-kubectl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Workshop: Container Troubleshooting with Sysdig Open Source</title>
      <link>https://devops-gathering.io/workshops/Workshop-Container-Troubleshooting-with-Sysdig-Open-Source/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devops-gathering.io/workshops/Workshop-Container-Troubleshooting-with-Sysdig-Open-Source/</guid>
      <description>

&lt;h2 id=&#34;visibility-and-troubleshooting&#34;&gt;Visibility and troubleshooting&lt;/h2&gt;

&lt;p&gt;Learn how to debug a 502 error on a containerized LB with HPproxy, a Python webapp that crashes after working for 5 minutes or finding where you configured the wrong credentials in a microservices app.&lt;/p&gt;

&lt;h2 id=&#34;analyzing-performance-and-bottlenecks&#34;&gt;Analyzing performance and bottlenecks&lt;/h2&gt;

&lt;p&gt;Compare the performance of different web servers running in containers, use system call tracing to find the bottleneck in your application or learn how to use spectograms (flame graphs) to visualize system call performance.&lt;/p&gt;

&lt;h2 id=&#34;security-run-time-monitoring-and-forensics&#34;&gt;Security run-time monitoring and forensics&lt;/h2&gt;

&lt;p&gt;Last but not least, all these previous lessons can also be applied for security. Not only with forensics on an attack attempt, but Sysdig Falco can alert on containers with anomalous behaviour as well.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Workshop (SOLD OUT): Building a Modern CI/CD Pipeline (with Docker and Kubernetes)</title>
      <link>https://devops-gathering.io/workshops/Workshop-Building-a-Modern-CI-CD-Pipeline-with-Docker-and-Kubernetes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devops-gathering.io/workshops/Workshop-Building-a-Modern-CI-CD-Pipeline-with-Docker-and-Kubernetes/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://devops-gathering.io/img/sold-out.png&#34; alt=&#34;Workshop is sold out&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Please note: This Workshop is already sold out!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The purpose of this workshop is to explore the core concepts of modern Continuous Delivery (CD). The participants will learn why CD is needed, what are the necessary (and the optional) parts of a great CD pipeline and how to wire them all together for an effective workflow. In the process we will get our hands dirty building and deploying a number of interconnected microservices onto a cloud-based cluster.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Workshop: Groovy integration testing with Docker and TestContainers</title>
      <link>https://devops-gathering.io/workshops/Workshop-Groovy-integration-testing-with-Docker-and-TestContainers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devops-gathering.io/workshops/Workshop-Groovy-integration-testing-with-Docker-and-TestContainers/</guid>
      <description>

&lt;p&gt;Use a production-like, portable test environment described in code - gone is the need for heavyweight manual setup of test systems and the pain of sharing test infrastructure with multiple developers and teams. Launch a fully functional testing suite not only consisting of unit tests, but also of integration tests, right from source control. And instead of manually writing and maintaining a bunch of brittle bash scripts for instrumenting your containers, participants will learn to leverage existing knowledge in writing JUnit tests and make use of the powerful TestContainers Java library.&lt;/p&gt;

&lt;p&gt;Going one step further, the workshop will also introduce Groovy and Spock as a substitute for JUnit, allowing to write easily readable and expressive BDD style tests.&lt;/p&gt;

&lt;h3 id=&#34;important&#34;&gt;Important:&lt;/h3&gt;

&lt;p&gt;As this is a hands-on workshop, it is essential that you bring a prepared workstation, containing the following software:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JDK 8&lt;/li&gt;
&lt;li&gt;Groovy 2.5&lt;/li&gt;
&lt;li&gt;Docker 17-CE&lt;/li&gt;
&lt;li&gt;Linux environment recommended&lt;/li&gt;
&lt;li&gt;macOS and Windows 10 environments using Docker for Mac and Docker for Windows should work in theory, but we can’t provide specialized support&lt;/li&gt;
&lt;li&gt;Of course it is also possible to pair using one workstation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Generals experience in using the following technologies is expected. Participants can tag along if they don’t know all the details, but some topics might get too complex if they are missing the basics.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>