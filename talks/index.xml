<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Talks-rsses on Devops Gathering 2018</title>
    <link>https://devops-gathering.io/talks/index.xml</link>
    <description>Recent content in Talks-rsses on Devops Gathering 2018</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://devops-gathering.io/talks/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Tear down silos! How? What comes next?</title>
      <link>https://devops-gathering.io/talks/Tear-down-silos-How-What-comes-next/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devops-gathering.io/talks/Tear-down-silos-How-What-comes-next/</guid>
      <description>

&lt;p&gt;The DevOps movement says &amp;ldquo;Tear down silos and improve collaboration!&amp;rdquo;. Are cross-functional teams the only solution for that? What new challenges does an organization built up from cross-functional teams have? And is about the rest of the organization beside Dev and Ops people?&lt;/p&gt;

&lt;h2 id=&#34;i-will-discuss-topic-like&#34;&gt;I will discuss topic like:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Team Topologies&lt;/li&gt;
&lt;li&gt;Communities of Practice&lt;/li&gt;
&lt;li&gt;real cross-functional Teams: Integrating Support, Marketing, &amp;hellip; into cross-functional teams&lt;/li&gt;
&lt;li&gt;Peach Model: Building central service teams for all disciplines, that have not been integrated to the cross-functional teams&lt;/li&gt;
&lt;li&gt;Endless Game: As there is no &amp;ldquo;Change the Business&amp;rdquo; and &amp;ldquo;Run the Business&amp;rdquo; anymore, you have to switch from a project-centric to a product-centric approach #noprojects&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Modern Monitoring for Dev and Ops</title>
      <link>https://devops-gathering.io/talks/Modern-Monitoring-for-Dev-and-Ops/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devops-gathering.io/talks/Modern-Monitoring-for-Dev-and-Ops/</guid>
      <description>&lt;p&gt;Monitoring used to be black-box focused and mostly an ops concern. In the modern world of large-scale systems, black-box probing is not only more important than ever, it has also proven insufficient. Learn about the reasons why you need to pull in the dev side and embrace white-box monitoring.&lt;/p&gt;

&lt;p&gt;Thanks to cloud computing, mere mortals are now empowered to start up large-scale distributed online-serving systems at will. But how to do proper monitoring and alerting? Luckily, &lt;a href=&#34;https://landing.google.com/sre/book.html&#34;&gt;the gods have shared some of their wisdom with us&lt;/a&gt;. One thing that sticks out is the importance of symptom-based alerting. Black-box probing seems to be just perfect for that. However, while it plays its role, it is by far not sufficient. This talk will shed light on the not necessarily obvious reasons why black-box monitoring needs to be complemented by quite a lot of white-box monitoring. Our showcase will be &lt;a href=&#34;https://prometheus.io&#34;&gt;Prometheus&lt;/a&gt;, a monitoring and alerting system focused on white-box monitoring, bringing you the enlightening fire of the gods since 2015. We will not focus on technical details of Prometheus (there are loads of talks and tutorials out there on the internet). Instead, this is about the change of monitoring from being mainly an operational concern to a firm involvement of developers as a prerequisite of meaningful white-box monitoring. This both requires and encourages some kind of DevOps approach and will, in best DevOps spirit, end up beneficial for all parties involved.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Kubernetes Patterns</title>
      <link>https://devops-gathering.io/talks/Kubernetes-Patterns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devops-gathering.io/talks/Kubernetes-Patterns/</guid>
      <description>&lt;p&gt;The way we develop and run applications on Cloud Native platforms like Kubernetes differs significantly from the traditional approach. There are fewer concerns for developers to think about, but at the same time, there are new patterns and practices for solving every-day challenges.&lt;/p&gt;

&lt;p&gt;In this talk, we will look at a collection of common patterns for developing Cloud Native applications. These patterns encapsulate proven solutions to common problems and help you to prevent inventing the wheel again.&lt;/p&gt;

&lt;p&gt;After a short introduction into the Kubernetes platform we will look at the following pattern categories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Foundational Patterns which build the basis of the Kubernetes platform&lt;/li&gt;
&lt;li&gt;Behavioral Patterns describe concepts for different types of applications&lt;/li&gt;
&lt;li&gt;Structural Patterns are for structuring your Cloud Native application&lt;/li&gt;
&lt;li&gt;Configuration Patterns provide various approaches to application configuration.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the end, you will have a solid overview how common problems can be solved when developing Cloud Native application for Kubernetes.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Continuous Database Integration with Flyway</title>
      <link>https://devops-gathering.io/talks/Continuous-Databas-Integration-with-Flyway/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devops-gathering.io/talks/Continuous-Databas-Integration-with-Flyway/</guid>
      <description>&lt;p&gt;&amp;ldquo;Classical&amp;rdquo; topics like relational database are often forgotten between hip topic like container. But in the reality we are confronted with task like how to automate my old system based on &amp;ldquo;old school&amp;rdquo; technology. This talk tries to show techniques to meet this challenge.&lt;/p&gt;

&lt;p&gt;Developers often neglect scritpts for relational databases. For the first release, they are generated by the ORM framework. But at the lastest during the second release, developers have to write the database migration scripts by themself. At this point the mess begins: the migration script are attached on tickets in the ticket system; they are shared via emails; maybe they are hidden in release notes and so on. At some point the overview, which migration script is for which software version is lost.
This talk shows, why it is important to include database scripts in your continuous integration process and which conditions, not only technical, have to be defined. A demo, based on a Java web application, shows how Flyway can support in this challenge.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building A Self-Sufficient System</title>
      <link>https://devops-gathering.io/talks/Building-a-Self-Sufficient-System/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devops-gathering.io/talks/Building-a-Self-Sufficient-System/</guid>
      <description>&lt;p&gt;Defining the steps required for a design of a self-adapting and self-healing system that will continue operating efficiently even when we are on vacations.&lt;/p&gt;

&lt;p&gt;What do we expect from a modern cluster? If a replica fails, it should be brought back up (rescheduled). If a node goes down all the services that were running inside it should be distributed among healthy nodes. Those tasks are easy to accomplish. Schedulers (Swarm, Kubernetes, Mesos/Marathon, and so on) are already doing those things for us. Many solutions provide self-healing by making sure that the system is (almost) always in the desired state. The problem with self-healing is that it does not take into the account constant changes. The number of requests is continuously changing, errors are created, network bandwidth is fluctuating, and so on. A cluster, and services inside it, is like a living body that needs to adapt to changes continuously. Services need to be scaled and de-scaled, nodes need to be created and added to the cluster only to be removed soon after. We call that process adaptation. Even that is not the problem in itself, as long as we have an army of operators that will monitor the system and do reactive and preventive actions. How about converting adaptation into self-adaptation? Can we remove humans from the process and make a system that is &lt;strong&gt;self-sufficient&lt;/strong&gt;? The goal of this talk is to try to outline the steps required for a design of a &lt;strong&gt;self-adapting&lt;/strong&gt; and &lt;strong&gt;self-healing&lt;/strong&gt; system that will continue operating efficiently even when we are on vacations.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>